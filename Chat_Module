dependencies:
  socket_io_client: ^2.0.0


class SocketProvider extends ChangeNotifier {
    IO.Socket socket = IO.io(ApiEndPoints.baseUrl, <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
      'query': {'userName': 'abc', 'registrationToken': 12132324243}
    });
  
  

    //socket connect
    void connect() {
        socket.connect();
    
        //return callback when socket connect successfully
        socket.onConnect((_) {
            print('connection established');
            socket.emit('setup', (id));
            socket.on('connected', (id) {
                print('-=-=-=-=-=-=-=-= connected =--=--=-=-=-');
            });
        });
    
        socket.on('unBlock', (userId) {});
    
        // block data received
        socket.on('block', (receiveBlockChatRoom) {});
    
        // match data received
        socket.on('match', (userId) {});
    
        // message received
        socket.on('message received', (newMessageRecieved) {})
    }
    
    //join chatroom
    void joinRoom() {
        socket.emit('join chat', dummy);
        notifyListeners();
    }
    
    //disjoin chatroom
    void disJoinRoom() {
        socket.emit('disjoin chat', dummy);
        notifyListeners();
    }
    
    //message send
    void sendMessage() {
        socket.emit('new message', msg);
        notifyListeners();
    }
    
    //block user
    void onBlockUser() {
        socket.emit('block User', chatRoom);
        notifyListeners();
    }
    
    //unblockuser
    void onUnBlockUser() {
        socket.emit('unBlock User', blockUSerId);
        notifyListeners();
    }
    
    //match user for start chat
    void matchUser() {
        socket.emit('match User', userId);
        notifyListeners();
    }
    
    //socket disconnect
    void disConnect() {
        socket.emit('disconnection', userID);
        socket.disconnect();
        socket.dispose();
        notifyListeners();
    }
}