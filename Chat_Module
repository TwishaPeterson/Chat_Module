dependencies:
//we have to use socket_io_client   



socket_io_client: ^2.0.0

  import 'package:socket_io_client/socket_io_client.dart' as IO;


  // This socketprovider class is used to handle all socket events like socket connect, disconnect, on and emit events.
  // The emit event is used when the user performs any functionality, and the socket.on event is used to send real-time downloads to another user's device.


class SocketProvider extends ChangeNotifier {

    //set all socket attributes and also set autoConnect false.
    IO.Socket socket = IO.io(['url'], <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
      'query': {'userName': ['userName'], 'registrationToken': ['token']}
    });
  
  

    //socket connect
    void connect() {
        socket.connect(); //if socket connect successfully then it returns socket.connected true and then go onConnect method.
    
        //return callback when socket connect successfully
        socket.onConnect((_) {
            print('connection established');//socket connected successfully
            socket.emit('setup', (id));//connect and set up in backend side
            socket.on('connected', (id) => print('=== connected ==='));//when restart backend server
        });
    

       // socket.on event perform real time update

        socket.on('unBlock', (data) => print(data));//when other user unblock you your list is update in real time without refresh page or app
        socket.on('block', (receiveBlockChatRoom) => print(receiveBlockChatRoom));//when other user block you your list is update in real time without refresh page or app
        socket.on('message received', (newMessageRecieved) => print(newMessageRecieved));//message received when other users message you and chat list update automatically
    }
    
    //message send
    void sendMessage() {
        socket.emit('new message', msg);//This event is emitted in the backend when a user message to another user, and the backend returns the socket.on event in the other user's device.
        notifyListeners();
    }
    
    //block user
    void onBlockUser() {
        socket.emit('block User', chatRoom);//This event is emitted in the backend when a user block another user, and the backend returns the socket.on event in the other user's device.
        notifyListeners();
    }
    
    //unblockuser
    void onUnBlockUser() {
        socket.emit('unBlock User', blockUSerId); // This event is emitted in the backend when a user unblock another user, and the backend returns the socket.on event in the other user's device.
        notifyListeners();
    }
    
    //socket disconnect
    void disConnect() {
        socket.emit('disconnection', userID); // The socket is disconnected in the backend.
        socket.disconnect(); //The socket is disconnected when the application is closed.
        socket.dispose();
        notifyListeners();
    }
}